{*
Example for Spectral3 Click

    Date          : Feb 2018.
    Author        : MikroE Team

Test configuration PIC :
    
    MCU             : P18F87K22
    Dev. Board      : EasyPIC PRO v7
    PIC Compiler ver : v7.2.0.0

---

Description :

The application is composed of three sections :

- System Initialization - Initializes all necessary GPIO pins, UART used for
the communcation with Spectral and UART used for infromation logging
- Application Initialization - Initializes driver, reset module and sends
command for the default module configuration
- Application Task - Sends the command to start reading data.
   Then logs to USBUART, six read values every 1 second.


*}
program Click_Spectral3_PIC;

uses Click_Spectral3_types, Click_Spectral3_config, Click_Spectral3_timer;

var
    readData : array[6] of uint16_t; 
    rspBuffer : array[100] of char; 
    text : array[100] of char; 
    cmdData : array[7] of uint8_t; 
    cmdAT : array[3] of uint8_t; 
    cmdGain : array[9] of uint8_t; 
    cmdMode : array[10] of uint8_t; 
    
procedure spectral3_default_handler(rsp : ^uint8_t; evArgs : ^uint8_t); 
var
    ptr : ^char;
begin
    ptr := rsp;

    mikrobus_logWrite(ptr, _LOG_LINE); 
    strcpy(rspBuffer, ptr); 

end;

procedure systemInit(); 
begin

    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_INT_PIN, _GPIO_INPUT); 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_RST_PIN, _GPIO_OUTPUT); 
    mikrobus_uartInit(_MIKROBUS1, @_SPECTRAL3_UART_CFG[0]); 
    mikrobus_logInit(_MIKROBUS3, 115200); 
    mikrobus_logWrite(' --- System init --- ', _LOG_LINE); 

end;

procedure applicationInit(); 
begin

    spectral3_configTimer(); 
    spectral3_uartDriverInit(T_SPECTRAL3_P(@_MIKROBUS1_GPIO), T_SPECTRAL3_P(@_MIKROBUS1_UART)); 
    spectral3_coreInit(@spectral3_default_handler, 1500); 
    spectral3_reset(); 
    Delay_ms(500); 
    spectral3_cmdSingle(@cmdAT[0]); 
    spectral3_cmdSingle(@cmdGain[0]); 
    spectral3_cmdSingle(@cmdMode[0]); 
    Delay_ms(1000); 

end;

procedure applicationTask(); 
begin

    spectral3_process(); 
    spectral3_cmdSingle(@cmdData[0]); 
    spectral3_getData(@rspBuffer[0], @readData[0]); 
    IntToStr(readData[0], text); 
    mikrobus_logWrite('-- R value:', _LOG_TEXT); 
    mikrobus_logWrite(text, _LOG_LINE); 
    IntToStr(readData[1], text); 
    mikrobus_logWrite('-- S value:', _LOG_TEXT); 
    mikrobus_logWrite(text, _LOG_LINE); 
    IntToStr(readData[2], text); 
    mikrobus_logWrite('-- T value:', _LOG_TEXT); 
    mikrobus_logWrite(text, _LOG_LINE); 
    IntToStr(readData[3], text); 
    mikrobus_logWrite('-- U value:', _LOG_TEXT); 
    mikrobus_logWrite(text, _LOG_LINE); 
    IntToStr(readData[4], text); 
    mikrobus_logWrite('-- V value:', _LOG_TEXT); 
    mikrobus_logWrite(text, _LOG_LINE); 
    IntToStr(readData[5], text); 
    mikrobus_logWrite('-- W value:', _LOG_TEXT); 
    mikrobus_logWrite(text, _LOG_LINE); 
    mikrobus_logWrite('---------------------', _LOG_LINE); 
    Delay_1sec(); 

end;

begin
    rspBuffer[0] := 0;
    cmdData[0] := 'A';
    cmdData[1] := 'T';
    cmdData[2] := 'D';
    cmdData[3] := 'A';
    cmdData[4] := 'T';
    cmdData[5] := 'A';
    cmdData[6] := 0;
    cmdAT[0] := 'A';
    cmdAT[1] := 'T';
    cmdAT[2] := 0;
    cmdGain[0] := 'A';
    cmdGain[1] := 'T';
    cmdGain[2] := 'G';
    cmdGain[3] := 'A';
    cmdGain[4] := 'I';
    cmdGain[5] := 'N';
    cmdGain[6] := '=';
    cmdGain[7] := '2';
    cmdGain[8] := 0;
    cmdMode[0] := 'A';
    cmdMode[1] := 'T';
    cmdMode[2] := 'T';
    cmdMode[3] := 'C';
    cmdMode[4] := 'S';
    cmdMode[5] := 'M';
    cmdMode[6] := 'D';
    cmdMode[7] := '=';
    cmdMode[8] := '2';
    cmdMode[9] := 0;

    systemInit(); 
    applicationInit(); 
    while (1) do 
    begin 
        applicationTask(); 
    end;

end.